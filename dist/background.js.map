{"version":3,"file":"background.js","mappings":"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","sources":["webpack://timetracker-react-ext/./src/background.js"],"sourcesContent":["// src/background.js\n\n// Use the correct API: in Firefox, \"browser\" is defined and returns promises;\n// in Chrome (or as a fallback) use \"chrome\". We assign it to extBrowser.\nconst extBrowser = (typeof browser !== 'undefined') ? browser : chrome;\n\nconst TIMETRACKER_BASE_URL = 'https://timetracker.iglu.ee/api';\nconst TIMETRACKER_LOGIN_URL = `${TIMETRACKER_BASE_URL}/login`;\nconst TIMETRACKER_TASKS_URL = `${TIMETRACKER_BASE_URL}/tasks`;\n\n/**\n * Helper to safely extract an error message.\n */\nfunction getErrorMessage(err) {\n    if (err instanceof Error) return err.message;\n    return String(err);\n}\n\n\nasync function tryAutoLogin() {\n    try {\n        // Check if we already have a valid token\n        const tokenData = await extBrowser.storage.local.get('timetrackerAuthToken');\n        if (tokenData.timetrackerAuthToken) {\n            return true;\n        }\n\n        // Get stored credentials\n        const creds = await extBrowser.storage.sync.get(['timetrackerUsername', 'timetrackerPassword']);\n        if (!creds.timetrackerUsername || !creds.timetrackerPassword) {\n            return false;\n        }\n\n        // Try to login\n        const token = await loginToTimetracker(creds.timetrackerUsername, creds.timetrackerPassword);\n        return Boolean(token);\n    } catch (err) {\n        console.error('Auto-login failed:', err);\n        return false;\n    }\n}\n\nasync function loginToTimetracker(username, password) {\n    console.log('loginToTimetracker: Attempting login for', username);\n    const response = await fetch(TIMETRACKER_LOGIN_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json;charset=UTF-8' },\n        body: JSON.stringify({ username, password })\n    });\n\n    if (!response.ok) {\n        if (response.status === 401) {\n            throw new Error('Invalid username or password');\n        }\n        const errorText = await response.text();\n        console.error('loginToTimetracker error:', errorText);\n        throw new Error(`Login failed: ${errorText}`);\n    }\n\n    const token = response.headers.get('x-Auth-Token');\n    if (!token) {\n        throw new Error('No x-Auth-Token found in response headers.');\n    }\n\n    await extBrowser.storage.local.set({ timetrackerAuthToken: token });\n    console.log('loginToTimetracker: Received token:', token);\n    return token;\n}\n\n/**\n * Retrieves the current user using the stored token.\n */\nasync function getCurrentUser() {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n\n    const response = await fetch(`${TIMETRACKER_BASE_URL}/users/current`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch current user');\n    }\n\n    const user = await response.json();\n    console.log('getCurrentUser: user object:', user);\n    return user;\n}\n\n/**\n * Retrieves projects for the given user ID.\n */\nasync function getProjectsForUser(personId) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const url = `${TIMETRACKER_BASE_URL}/projects?isActive=true&personId=${personId}`;\n    console.log('getProjectsForUser: requesting', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch projects');\n    }\n\n    const projects = await response.json();\n    console.log('getProjectsForUser: projects count =', projects.length);\n    return projects;\n}\n\n/**\n * Returns an object with the current user and their projects.\n */\nasync function getProjects() {\n    const user = await getCurrentUser();\n    const projects = await getProjectsForUser(user.id);\n    return { user, projects };\n}\n\n/**\n * Creates a new Timetracker task.\n */\nasync function doCreateTask(issueKey, issueSummary, project) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const postData = {\n        name: `${issueKey} - ${issueSummary}`,\n        type: 'development',\n        project\n    };\n\n    console.log('doCreateTask: Creating task with payload:', postData);\n\n    const response = await fetch(TIMETRACKER_TASKS_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(postData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (response.status === 400) {\n        const errorResponse = await response.json();\n        console.error('doCreateTask: 400 error:', errorResponse);\n        if (\n            Array.isArray(errorResponse) &&\n            errorResponse.length > 0 &&\n            errorResponse[0].message?.code === 'taskDuplicateKey'\n        ) {\n            throw new Error('Task already exists in Timetracker!');\n        } else {\n            throw new Error(JSON.stringify(errorResponse));\n        }\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('doCreateTask: error text:', errorText);\n        throw new Error(errorText);\n    }\n\n    const data = await response.json();\n    console.log('doCreateTask: (Partial) task created:', data);\n    return data;\n}\n\n/**\n * Finds a Timetracker task by name for a given user.\n */\nasync function findTaskByName(taskName, personId) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const issueKey = taskName.split(' - ')[0].trim();\n    const encodedName = encodeURIComponent(issueKey);\n    const url = `${TIMETRACKER_BASE_URL}/calendar/tasks/actions/findByName/${encodedName}?selectedPersonId=${personId}`;\n    console.log('findTaskByName: GET', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to find task by name');\n    }\n\n    const resultData = await response.json();\n    console.log('findTaskByName: result =', resultData);\n    return resultData;\n}\n\n/**\n * Builds an array of roles from a roles array.\n */\nfunction buildRoles(rolesArray) {\n    let bitMask = \"01\";\n    const userRoles = {};\n    for (let i = 0; i < rolesArray.length; i++) {\n        const role = rolesArray[i];\n        const intCode = parseInt(bitMask, 2);\n        userRoles[role] = {\n            bitMask: intCode,\n            title: role\n        };\n        bitMask = (intCode << 1).toString(2);\n    }\n    return Object.values(userRoles);\n}\n\n/**\n * Creates a worklog entry.\n */\nasync function createWorklog(taskFromContent, startTime, endTime, comment, userFromContent) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n\n    const finalPerson = {\n        id: userFromContent.id,\n        fullName: userFromContent.fullName,\n        firstName: userFromContent.firstName,\n        lastName: userFromContent.lastName,\n        roles: buildRoles(userFromContent.roles || []),\n        startDate: userFromContent.startDate || null,\n        endDate: userFromContent.endDate || null\n    };\n\n    const finalTask = {\n        id: taskFromContent.id,\n        name: taskFromContent.name,\n        type: taskFromContent.type,\n        project: taskFromContent.project,\n        isActive: taskFromContent.isActive,\n        hasWorklogs: taskFromContent.hasWorklogs,\n        isCommentRequired: taskFromContent.isCommentRequired,\n        estimateDevel: taskFromContent.estimateDevel || 0,\n        estimateAnal: taskFromContent.estimateAnal || 0,\n        estimateTest: taskFromContent.estimateTest || 0,\n        estimateBuffer: taskFromContent.estimateBuffer || 0,\n        estimateGeneral: taskFromContent.estimateGeneral || 0,\n        generalDuration: taskFromContent.generalDuration,\n        generalDurationHours: taskFromContent.generalDurationHours,\n        firstInGroup: taskFromContent.firstInGroup\n    };\n\n    const bodyData = {\n        startTime,\n        endTime,\n        comment: comment || '',\n        isPlanlog: false,\n        task: finalTask,\n        person: finalPerson\n    };\n\n    console.log('createWorklog: final payload =>', bodyData);\n\n    const url = `${TIMETRACKER_BASE_URL}/calendar/worklogs`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(bodyData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('createWorklog: error text:', errorText);\n        try {\n            const errorResponse = JSON.parse(errorText);\n            if (Array.isArray(errorResponse) && errorResponse[0]?.message?.code) {\n                const errorCode = errorResponse[0].message.code;\n                if (errorCode === 'worklogConcurrentWorklogs') {\n                    return Promise.reject(new Error('Worklog already exists for the specified time period.'));\n                }\n            }\n            return Promise.reject(new Error('Unknown error format received.'));\n        } catch (e) {\n            console.error('createWorklog: Failed to parse error response:', e);\n            return Promise.reject(new Error('Failed to parse error response'));\n        }\n    }\n\n    const responseText = await response.text();\n    let data = {};\n    try {\n        data = responseText ? JSON.parse(responseText) : {};\n    } catch (e) {\n        console.error('createWorklog: JSON parse error:', e);\n    }\n    console.log('createWorklog: success response:', data);\n    return data;\n}\n\n// Listen for messages from content scripts or the UI.\nextBrowser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('background.js - onMessage:', request);\n\n    if (request.action === 'GET_PROJECTS_AND_USER') {\n        tryAutoLogin()\n            .then(success => {\n                if (success) {\n                    return getProjects();\n                } else {\n                    throw new Error('NO_TOKEN');\n                }\n            })\n            .then(({ user, projects }) => {\n                sendResponse({ success: true, user, projects });\n            })\n            .catch(err => {\n                console.error('GET_PROJECTS_AND_USER error:', err.message);\n                if (err.message === 'NO_TOKEN' || err.message === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: err.message });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'LOGIN') {\n        const { username, password } = request.payload;\n        loginToTimetracker(username, password)\n            .then(() => getProjects())\n            .then(({ user, projects }) => {\n                sendResponse({ success: true, user, projects });\n            })\n            .catch((err) => {\n                console.error('LOGIN error:', err);\n                const msg = getErrorMessage(err);\n                sendResponse({ success: false, error: msg });\n            });\n        return true;\n    }\n\n    if (request.action === 'FIND_TASK_BY_NAME') {\n        const { taskName, personId } = request.payload;\n        findTaskByName(taskName, personId)\n            .then((result) => sendResponse({ success: true, data: result }))\n            .catch((err) => {\n                console.error('FIND_TASK_BY_NAME error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_TIMETRACKER_TASK') {\n        const { issueKey, issueSummary, project } = request.payload;\n        doCreateTask(issueKey, issueSummary, project)\n            .then((partialTask) => {\n                sendResponse({ success: true, data: partialTask });\n            })\n            .catch((err) => {\n                console.error('CREATE_TIMETRACKER_TASK error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_WORKLOG') {\n        const { task, startTime, endTime, comment, person } = request.payload;\n        createWorklog(task, startTime, endTime, comment, person)\n            .then((result) => {\n                sendResponse({ success: true, data: result });\n            })\n            .catch((err) => {\n                console.error('CREATE_WORKLOG error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n});\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","extBrowser","browser","chrome","TIMETRACKER_BASE_URL","TIMETRACKER_LOGIN_URL","concat","TIMETRACKER_TASKS_URL","getErrorMessage","err","message","String","_tryAutoLogin","_callee","creds","token","_context","storage","local","get","timetrackerAuthToken","sync","timetrackerUsername","timetrackerPassword","loginToTimetracker","Boolean","t0","console","error","_x","_x2","_loginToTimetracker","_callee2","username","password","response","errorText","_context2","log","fetch","headers","body","JSON","stringify","ok","status","text","set","getCurrentUser","_getCurrentUser","_callee3","result","user","_context3","json","getProjectsForUser","_x3","_getProjectsForUser","_callee4","personId","url","projects","_context4","getProjects","_getProjects","_callee5","_context5","id","_doCreateTask","_callee6","issueKey","issueSummary","project","postData","_errorResponse$0$mess","errorResponse","data","_context6","Array","isArray","code","_findTaskByName","_callee7","taskName","encodedName","resultData","_context7","split","trim","encodeURIComponent","buildRoles","rolesArray","bitMask","userRoles","role","intCode","parseInt","title","toString","_createWorklog","_callee8","taskFromContent","startTime","endTime","comment","userFromContent","finalPerson","finalTask","bodyData","_errorResponse$","responseText","_context8","fullName","firstName","lastName","roles","startDate","endDate","isActive","hasWorklogs","isCommentRequired","estimateDevel","estimateAnal","estimateTest","estimateBuffer","estimateGeneral","generalDuration","generalDurationHours","firstInGroup","isPlanlog","task","person","parse","reject","runtime","onMessage","addListener","request","sender","sendResponse","action","tryAutoLogin","success","_ref","needCredentials","_request$payload","payload","_ref2","msg","_request$payload2","_x7","_x8","findTaskByName","_request$payload3","_x4","_x5","_x6","doCreateTask","partialTask","_request$payload4","_x9","_x10","_x11","_x12","_x13","createWorklog"],"sourceRoot":""}