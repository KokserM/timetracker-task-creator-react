{"version":3,"file":"background.js","mappings":"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","sources":["webpack://timetracker-react-ext/./src/background.js"],"sourcesContent":["// src/background.js\n\n// Use the correct API: in Firefox, \"browser\" is defined and returns promises;\n// in Chrome (or as a fallback) use \"chrome\". We assign it to extBrowser.\nconst extBrowser = (typeof browser !== 'undefined') ? browser : chrome;\n\nconst TIMETRACKER_BASE_URL = 'https://timetracker.iglu.ee/api';\nconst TIMETRACKER_LOGIN_URL = `${TIMETRACKER_BASE_URL}/login`;\nconst TIMETRACKER_TASKS_URL = `${TIMETRACKER_BASE_URL}/tasks`;\n\n/**\n * Helper to safely extract an error message.\n */\nfunction getErrorMessage(err) {\n    if (err instanceof Error) return err.message;\n    return String(err);\n}\n\n/**\n * Logs in with the provided username and password.\n * Always throws an Error object on failure.\n */\nasync function loginToTimetracker(username, password) {\n    console.log('loginToTimetracker: Attempting login for', username);\n    const response = await fetch(TIMETRACKER_LOGIN_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json;charset=UTF-8' },\n        body: JSON.stringify({ username, password })\n    });\n\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('loginToTimetracker error:', errorText);\n        throw new Error(`Login failed: ${errorText}`);\n    }\n\n    const token = response.headers.get('x-Auth-Token');\n    if (!token) {\n        throw new Error('No x-Auth-Token found in response headers.');\n    }\n\n    await extBrowser.storage.local.set({ timetrackerAuthToken: token });\n    console.log('loginToTimetracker: Received token:', token);\n    return token;\n}\n\n/**\n * Retrieves the current user using the stored token.\n */\nasync function getCurrentUser() {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n\n    const response = await fetch(`${TIMETRACKER_BASE_URL}/users/current`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch current user');\n    }\n\n    const user = await response.json();\n    console.log('getCurrentUser: user object:', user);\n    return user;\n}\n\n/**\n * Retrieves projects for the given user ID.\n */\nasync function getProjectsForUser(personId) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const url = `${TIMETRACKER_BASE_URL}/projects?isActive=true&personId=${personId}`;\n    console.log('getProjectsForUser: requesting', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch projects');\n    }\n\n    const projects = await response.json();\n    console.log('getProjectsForUser: projects count =', projects.length);\n    return projects;\n}\n\n/**\n * Returns an object with the current user and their projects.\n */\nasync function getProjects() {\n    const user = await getCurrentUser();\n    const projects = await getProjectsForUser(user.id);\n    return { user, projects };\n}\n\n/**\n * Creates a new Timetracker task.\n */\nasync function doCreateTask(issueKey, issueSummary, project) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const postData = {\n        name: `${issueKey} - ${issueSummary}`,\n        type: 'development',\n        project\n    };\n\n    console.log('doCreateTask: Creating task with payload:', postData);\n\n    const response = await fetch(TIMETRACKER_TASKS_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(postData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (response.status === 400) {\n        const errorResponse = await response.json();\n        console.error('doCreateTask: 400 error:', errorResponse);\n        if (\n            Array.isArray(errorResponse) &&\n            errorResponse.length > 0 &&\n            errorResponse[0].message?.code === 'taskDuplicateKey'\n        ) {\n            throw new Error('Task already exists in Timetracker!');\n        } else {\n            throw new Error(JSON.stringify(errorResponse));\n        }\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('doCreateTask: error text:', errorText);\n        throw new Error(errorText);\n    }\n\n    const data = await response.json();\n    console.log('doCreateTask: (Partial) task created:', data);\n    return data;\n}\n\n/**\n * Finds a Timetracker task by name for a given user.\n */\nasync function findTaskByName(taskName, personId) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const encodedName = encodeURIComponent(taskName);\n    const url = `${TIMETRACKER_BASE_URL}/calendar/tasks/actions/findByName/${encodedName}?selectedPersonId=${personId}`;\n    console.log('findTaskByName: GET', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to find task by name');\n    }\n\n    const resultData = await response.json();\n    console.log('findTaskByName: result =', resultData);\n    return resultData;\n}\n\n/**\n * Builds an array of roles from a roles array.\n */\nfunction buildRoles(rolesArray) {\n    let bitMask = \"01\";\n    const userRoles = {};\n    for (let i = 0; i < rolesArray.length; i++) {\n        const role = rolesArray[i];\n        const intCode = parseInt(bitMask, 2);\n        userRoles[role] = {\n            bitMask: intCode,\n            title: role\n        };\n        bitMask = (intCode << 1).toString(2);\n    }\n    return Object.values(userRoles);\n}\n\n/**\n * Creates a worklog entry.\n */\nasync function createWorklog(taskFromContent, startTime, endTime, comment, userFromContent) {\n    const result = await extBrowser.storage.local.get('timetrackerAuthToken');\n    const timetrackerAuthToken = result.timetrackerAuthToken;\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n\n    const finalPerson = {\n        id: userFromContent.id,\n        fullName: userFromContent.fullName,\n        firstName: userFromContent.firstName,\n        lastName: userFromContent.lastName,\n        roles: buildRoles(userFromContent.roles || []),\n        startDate: userFromContent.startDate || null,\n        endDate: userFromContent.endDate || null\n    };\n\n    const finalTask = {\n        id: taskFromContent.id,\n        name: taskFromContent.name,\n        type: taskFromContent.type,\n        project: taskFromContent.project,\n        isActive: taskFromContent.isActive,\n        hasWorklogs: taskFromContent.hasWorklogs,\n        isCommentRequired: taskFromContent.isCommentRequired,\n        estimateDevel: taskFromContent.estimateDevel || 0,\n        estimateAnal: taskFromContent.estimateAnal || 0,\n        estimateTest: taskFromContent.estimateTest || 0,\n        estimateBuffer: taskFromContent.estimateBuffer || 0,\n        estimateGeneral: taskFromContent.estimateGeneral || 0,\n        generalDuration: taskFromContent.generalDuration,\n        generalDurationHours: taskFromContent.generalDurationHours,\n        firstInGroup: taskFromContent.firstInGroup\n    };\n\n    const bodyData = {\n        startTime,\n        endTime,\n        comment: comment || '',\n        isPlanlog: false,\n        task: finalTask,\n        person: finalPerson\n    };\n\n    console.log('createWorklog: final payload =>', bodyData);\n\n    const url = `${TIMETRACKER_BASE_URL}/calendar/worklogs`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(bodyData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('createWorklog: error text:', errorText);\n        throw new Error(errorText);\n    }\n\n    const responseText = await response.text();\n    let data = {};\n    try {\n        data = responseText ? JSON.parse(responseText) : {};\n    } catch (e) {\n        console.error('createWorklog: JSON parse error:', e);\n    }\n    console.log('createWorklog: success response:', data);\n    return data;\n}\n\n// Listen for messages from content scripts or the UI.\nextBrowser.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('background.js - onMessage:', request);\n\n    if (request.action === 'GET_PROJECTS_AND_USER') {\n        getProjects()\n            .then(({ user, projects }) => {\n                sendResponse({ success: true, user, projects });\n                console.log('GET_PROJECTS_AND_USER success:', user, projects);\n            })\n            .catch((err) => {\n                console.error('GET_PROJECTS_AND_USER error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'LOGIN') {\n        const { username, password } = request.payload;\n        loginToTimetracker(username, password)\n            .then(() => getProjects())\n            .then(({ user, projects }) => {\n                sendResponse({ success: true, user, projects });\n            })\n            .catch((err) => {\n                console.error('LOGIN error:', err);\n                const msg = getErrorMessage(err);\n                sendResponse({ success: false, error: msg });\n            });\n        return true;\n    }\n\n    if (request.action === 'FIND_TASK_BY_NAME') {\n        const { taskName, personId } = request.payload;\n        findTaskByName(taskName, personId)\n            .then((result) => sendResponse({ success: true, data: result }))\n            .catch((err) => {\n                console.error('FIND_TASK_BY_NAME error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_TIMETRACKER_TASK') {\n        const { issueKey, issueSummary, project } = request.payload;\n        doCreateTask(issueKey, issueSummary, project)\n            .then((partialTask) => {\n                sendResponse({ success: true, data: partialTask });\n            })\n            .catch((err) => {\n                console.error('CREATE_TIMETRACKER_TASK error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_WORKLOG') {\n        const { task, startTime, endTime, comment, person } = request.payload;\n        createWorklog(task, startTime, endTime, comment, person)\n            .then((result) => {\n                sendResponse({ success: true, data: result });\n            })\n            .catch((err) => {\n                console.error('CREATE_WORKLOG error:', err);\n                const msg = getErrorMessage(err);\n                if (msg === 'NO_TOKEN' || msg === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: msg });\n                }\n            });\n        return true;\n    }\n});\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","extBrowser","browser","chrome","TIMETRACKER_BASE_URL","TIMETRACKER_LOGIN_URL","concat","TIMETRACKER_TASKS_URL","getErrorMessage","err","message","String","loginToTimetracker","_x","_x2","_loginToTimetracker","_callee","username","password","response","errorText","token","_callee$","_context","console","log","fetch","headers","body","JSON","stringify","ok","text","error","get","storage","local","set","timetrackerAuthToken","getCurrentUser","_getCurrentUser","_callee2","result","user","_callee2$","_context2","status","json","getProjectsForUser","_x3","_getProjectsForUser","_callee3","personId","url","projects","_callee3$","_context3","getProjects","_getProjects","_callee4","_callee4$","_context4","id","doCreateTask","_x4","_x5","_x6","_doCreateTask","_callee5","issueKey","issueSummary","project","postData","_errorResponse$0$mess","errorResponse","data","_callee5$","_context5","Array","isArray","code","findTaskByName","_x7","_x8","_findTaskByName","_callee6","taskName","encodedName","resultData","_callee6$","_context6","encodeURIComponent","buildRoles","rolesArray","bitMask","userRoles","role","intCode","parseInt","title","toString","createWorklog","_x9","_x10","_x11","_x12","_x13","_createWorklog","_callee7","taskFromContent","startTime","endTime","comment","userFromContent","finalPerson","finalTask","bodyData","responseText","_callee7$","_context7","fullName","firstName","lastName","roles","startDate","endDate","isActive","hasWorklogs","isCommentRequired","estimateDevel","estimateAnal","estimateTest","estimateBuffer","estimateGeneral","generalDuration","generalDurationHours","firstInGroup","isPlanlog","task","person","parse","runtime","onMessage","addListener","request","sender","sendResponse","action","_ref","success","msg","needCredentials","_request$payload","payload","_ref2","_request$payload2","_request$payload3","partialTask","_request$payload4"],"sourceRoot":""}