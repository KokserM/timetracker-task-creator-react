{"version":3,"file":"background.js","mappings":";sQACAA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAAJ,OAAAK,gBAAA,SAAAP,EAAAD,EAAAE,GAAAD,EAAAD,GAAAE,EAAAO,KAAA,EAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAjB,EAAAD,EAAAE,GAAA,OAAAC,OAAAK,eAAAP,EAAAD,EAAA,CAAAS,MAAAP,EAAAiB,YAAA,EAAAC,cAAA,EAAAC,UAAA,IAAApB,EAAAD,EAAA,KAAAkB,EAAA,aAAAjB,GAAAiB,EAAA,SAAAjB,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAoB,EAAArB,EAAAD,EAAAE,EAAAG,GAAA,IAAAK,EAAAV,GAAAA,EAAAI,qBAAAmB,EAAAvB,EAAAuB,EAAAX,EAAAT,OAAAqB,OAAAd,EAAAN,WAAAU,EAAA,IAAAW,EAAApB,GAAA,WAAAE,EAAAK,EAAA,WAAAH,MAAAiB,EAAAzB,EAAAC,EAAAY,KAAAF,CAAA,UAAAe,EAAA1B,EAAAD,EAAAE,GAAA,WAAA0B,KAAA,SAAAC,IAAA5B,EAAA6B,KAAA9B,EAAAE,GAAA,OAAAD,GAAA,OAAA2B,KAAA,QAAAC,IAAA5B,EAAA,EAAAD,EAAAsB,KAAAA,EAAA,IAAAS,EAAA,iBAAAC,EAAA,iBAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,YAAAZ,IAAA,UAAAa,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAApB,EAAAoB,EAAA1B,GAAA,8BAAA2B,EAAApC,OAAAqC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAAvC,GAAAG,EAAAyB,KAAAW,EAAA7B,KAAA0B,EAAAG,GAAA,IAAAE,EAAAN,EAAAjC,UAAAmB,EAAAnB,UAAAD,OAAAqB,OAAAc,GAAA,SAAAM,EAAA3C,GAAA,0BAAA4C,SAAA,SAAA7C,GAAAkB,EAAAjB,EAAAD,GAAA,SAAAC,GAAA,YAAA6C,QAAA9C,EAAAC,EAAA,gBAAA8C,EAAA9C,EAAAD,GAAA,SAAAgD,EAAA9C,EAAAK,EAAAG,EAAAE,GAAA,IAAAE,EAAAa,EAAA1B,EAAAC,GAAAD,EAAAM,GAAA,aAAAO,EAAAc,KAAA,KAAAZ,EAAAF,EAAAe,IAAAE,EAAAf,EAAAP,MAAA,OAAAsB,GAAA,UAAAkB,EAAAlB,IAAA1B,EAAAyB,KAAAC,EAAA,WAAA/B,EAAAkD,QAAAnB,EAAAoB,SAAAC,MAAA,SAAAnD,GAAA+C,EAAA,OAAA/C,EAAAS,EAAAE,EAAA,aAAAX,GAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAZ,EAAAkD,QAAAnB,GAAAqB,MAAA,SAAAnD,GAAAe,EAAAP,MAAAR,EAAAS,EAAAM,EAAA,aAAAf,GAAA,OAAA+C,EAAA,QAAA/C,EAAAS,EAAAE,EAAA,IAAAA,EAAAE,EAAAe,IAAA,KAAA3B,EAAAK,EAAA,gBAAAE,MAAA,SAAAR,EAAAI,GAAA,SAAAgD,IAAA,WAAArD,GAAA,SAAAA,EAAAE,GAAA8C,EAAA/C,EAAAI,EAAAL,EAAAE,EAAA,WAAAA,EAAAA,EAAAA,EAAAkD,KAAAC,EAAAA,GAAAA,GAAA,aAAA3B,EAAA1B,EAAAE,EAAAG,GAAA,IAAAE,EAAAwB,EAAA,gBAAArB,EAAAE,GAAA,GAAAL,IAAA0B,EAAA,MAAAqB,MAAA,mCAAA/C,IAAA2B,EAAA,cAAAxB,EAAA,MAAAE,EAAA,OAAAH,MAAAR,EAAAsD,MAAA,OAAAlD,EAAAmD,OAAA9C,EAAAL,EAAAwB,IAAAjB,IAAA,KAAAE,EAAAT,EAAAoD,SAAA,GAAA3C,EAAA,KAAAE,EAAA0C,EAAA5C,EAAAT,GAAA,GAAAW,EAAA,IAAAA,IAAAmB,EAAA,gBAAAnB,CAAA,cAAAX,EAAAmD,OAAAnD,EAAAsD,KAAAtD,EAAAuD,MAAAvD,EAAAwB,SAAA,aAAAxB,EAAAmD,OAAA,IAAAjD,IAAAwB,EAAA,MAAAxB,EAAA2B,EAAA7B,EAAAwB,IAAAxB,EAAAwD,kBAAAxD,EAAAwB,IAAA,gBAAAxB,EAAAmD,QAAAnD,EAAAyD,OAAA,SAAAzD,EAAAwB,KAAAtB,EAAA0B,EAAA,IAAAK,EAAAX,EAAA3B,EAAAE,EAAAG,GAAA,cAAAiC,EAAAV,KAAA,IAAArB,EAAAF,EAAAkD,KAAArB,EAAAF,EAAAM,EAAAT,MAAAM,EAAA,gBAAA1B,MAAA6B,EAAAT,IAAA0B,KAAAlD,EAAAkD,KAAA,WAAAjB,EAAAV,OAAArB,EAAA2B,EAAA7B,EAAAmD,OAAA,QAAAnD,EAAAwB,IAAAS,EAAAT,IAAA,YAAA6B,EAAA1D,EAAAE,GAAA,IAAAG,EAAAH,EAAAsD,OAAAjD,EAAAP,EAAAa,SAAAR,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAAuD,SAAA,eAAApD,GAAAL,EAAAa,SAAA,SAAAX,EAAAsD,OAAA,SAAAtD,EAAA2B,IAAA5B,EAAAyD,EAAA1D,EAAAE,GAAA,UAAAA,EAAAsD,SAAA,WAAAnD,IAAAH,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA1D,EAAA,aAAA8B,EAAA,IAAAzB,EAAAiB,EAAApB,EAAAP,EAAAa,SAAAX,EAAA2B,KAAA,aAAAnB,EAAAkB,KAAA,OAAA1B,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAAnB,EAAAmB,IAAA3B,EAAAuD,SAAA,KAAAtB,EAAA,IAAAvB,EAAAF,EAAAmB,IAAA,OAAAjB,EAAAA,EAAA2C,MAAArD,EAAAF,EAAAgE,YAAApD,EAAAH,MAAAP,EAAA+D,KAAAjE,EAAAkE,QAAA,WAAAhE,EAAAsD,SAAAtD,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,GAAAC,EAAAuD,SAAA,KAAAtB,GAAAvB,GAAAV,EAAAsD,OAAA,QAAAtD,EAAA2B,IAAA,IAAAkC,UAAA,oCAAA7D,EAAAuD,SAAA,KAAAtB,EAAA,UAAAgC,EAAAlE,GAAA,IAAAD,EAAA,CAAAoE,OAAAnE,EAAA,SAAAA,IAAAD,EAAAqE,SAAApE,EAAA,SAAAA,IAAAD,EAAAsE,WAAArE,EAAA,GAAAD,EAAAuE,SAAAtE,EAAA,SAAAuE,WAAAC,KAAAzE,EAAA,UAAA0E,EAAAzE,GAAA,IAAAD,EAAAC,EAAA0E,YAAA,GAAA3E,EAAA4B,KAAA,gBAAA5B,EAAA6B,IAAA5B,EAAA0E,WAAA3E,CAAA,UAAAyB,EAAAxB,GAAA,KAAAuE,WAAA,EAAAJ,OAAA,SAAAnE,EAAA4C,QAAAsB,EAAA,WAAAS,OAAA,YAAAlC,EAAA1C,GAAA,GAAAA,GAAA,KAAAA,EAAA,KAAAE,EAAAF,EAAAY,GAAA,GAAAV,EAAA,OAAAA,EAAA4B,KAAA9B,GAAA,sBAAAA,EAAAiE,KAAA,OAAAjE,EAAA,IAAA6E,MAAA7E,EAAA8E,QAAA,KAAAvE,GAAA,EAAAG,EAAA,SAAAuD,IAAA,OAAA1D,EAAAP,EAAA8E,QAAA,GAAAzE,EAAAyB,KAAA9B,EAAAO,GAAA,OAAA0D,EAAAxD,MAAAT,EAAAO,GAAA0D,EAAAV,MAAA,EAAAU,EAAA,OAAAA,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,SAAAvD,EAAAuD,KAAAvD,CAAA,YAAAqD,UAAAd,EAAAjD,GAAA,2BAAAoC,EAAAhC,UAAAiC,EAAA9B,EAAAoC,EAAA,eAAAlC,MAAA4B,EAAAjB,cAAA,IAAAb,EAAA8B,EAAA,eAAA5B,MAAA2B,EAAAhB,cAAA,IAAAgB,EAAA2C,YAAA7D,EAAAmB,EAAArB,EAAA,qBAAAhB,EAAAgF,oBAAA,SAAA/E,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAgF,YAAA,QAAAjF,IAAAA,IAAAoC,GAAA,uBAAApC,EAAA+E,aAAA/E,EAAAkF,MAAA,EAAAlF,EAAAmF,KAAA,SAAAlF,GAAA,OAAAE,OAAAiF,eAAAjF,OAAAiF,eAAAnF,EAAAoC,IAAApC,EAAAoF,UAAAhD,EAAAnB,EAAAjB,EAAAe,EAAA,sBAAAf,EAAAG,UAAAD,OAAAqB,OAAAmB,GAAA1C,CAAA,EAAAD,EAAAsF,MAAA,SAAArF,GAAA,OAAAkD,QAAAlD,EAAA,EAAA2C,EAAAG,EAAA3C,WAAAc,EAAA6B,EAAA3C,UAAAU,GAAA,0BAAAd,EAAA+C,cAAAA,EAAA/C,EAAAuF,MAAA,SAAAtF,EAAAC,EAAAG,EAAAE,EAAAG,QAAA,IAAAA,IAAAA,EAAA8E,SAAA,IAAA5E,EAAA,IAAAmC,EAAAzB,EAAArB,EAAAC,EAAAG,EAAAE,GAAAG,GAAA,OAAAV,EAAAgF,oBAAA9E,GAAAU,EAAAA,EAAAqD,OAAAb,MAAA,SAAAnD,GAAA,OAAAA,EAAAsD,KAAAtD,EAAAQ,MAAAG,EAAAqD,MAAA,KAAArB,EAAAD,GAAAzB,EAAAyB,EAAA3B,EAAA,aAAAE,EAAAyB,EAAA/B,GAAA,0BAAAM,EAAAyB,EAAA,qDAAA3C,EAAAyF,KAAA,SAAAxF,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAAuE,KAAApE,GAAA,OAAAH,EAAAwF,UAAA,SAAAzB,IAAA,KAAA/D,EAAA4E,QAAA,KAAA7E,EAAAC,EAAAyF,MAAA,GAAA1F,KAAAD,EAAA,OAAAiE,EAAAxD,MAAAR,EAAAgE,EAAAV,MAAA,EAAAU,CAAA,QAAAA,EAAAV,MAAA,EAAAU,CAAA,GAAAjE,EAAA0C,OAAAA,EAAAjB,EAAArB,UAAA,CAAA6E,YAAAxD,EAAAmD,MAAA,SAAA5E,GAAA,QAAA4F,KAAA,OAAA3B,KAAA,OAAAN,KAAA,KAAAC,MAAA3D,EAAA,KAAAsD,MAAA,OAAAE,SAAA,UAAAD,OAAA,YAAA3B,IAAA5B,EAAA,KAAAuE,WAAA3B,QAAA6B,IAAA1E,EAAA,QAAAE,KAAA,WAAAA,EAAA2F,OAAA,IAAAxF,EAAAyB,KAAA,KAAA5B,KAAA2E,OAAA3E,EAAA4F,MAAA,WAAA5F,GAAAD,EAAA,EAAA8F,KAAA,gBAAAxC,MAAA,MAAAtD,EAAA,KAAAuE,WAAA,GAAAG,WAAA,aAAA1E,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,YAAAmE,IAAA,EAAAnC,kBAAA,SAAA7D,GAAA,QAAAuD,KAAA,MAAAvD,EAAA,IAAAE,EAAA,cAAA+F,EAAA5F,EAAAE,GAAA,OAAAK,EAAAgB,KAAA,QAAAhB,EAAAiB,IAAA7B,EAAAE,EAAA+D,KAAA5D,EAAAE,IAAAL,EAAAsD,OAAA,OAAAtD,EAAA2B,IAAA5B,KAAAM,CAAA,SAAAA,EAAA,KAAAiE,WAAAM,OAAA,EAAAvE,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAA8D,WAAAjE,GAAAK,EAAAF,EAAAiE,WAAA,YAAAjE,EAAA0D,OAAA,OAAA6B,EAAA,UAAAvF,EAAA0D,QAAA,KAAAwB,KAAA,KAAA9E,EAAAT,EAAAyB,KAAApB,EAAA,YAAAM,EAAAX,EAAAyB,KAAApB,EAAA,iBAAAI,GAAAE,EAAA,SAAA4E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,WAAAuB,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,SAAAxD,GAAA,QAAA8E,KAAAlF,EAAA2D,SAAA,OAAA4B,EAAAvF,EAAA2D,UAAA,YAAArD,EAAA,MAAAsC,MAAA,kDAAAsC,KAAAlF,EAAA4D,WAAA,OAAA2B,EAAAvF,EAAA4D,WAAA,KAAAR,OAAA,SAAA7D,EAAAD,GAAA,QAAAE,EAAA,KAAAsE,WAAAM,OAAA,EAAA5E,GAAA,IAAAA,EAAA,KAAAK,EAAA,KAAAiE,WAAAtE,GAAA,GAAAK,EAAA6D,QAAA,KAAAwB,MAAAvF,EAAAyB,KAAAvB,EAAA,oBAAAqF,KAAArF,EAAA+D,WAAA,KAAA5D,EAAAH,EAAA,OAAAG,IAAA,UAAAT,GAAA,aAAAA,IAAAS,EAAA0D,QAAApE,GAAAA,GAAAU,EAAA4D,aAAA5D,EAAA,UAAAE,EAAAF,EAAAA,EAAAiE,WAAA,UAAA/D,EAAAgB,KAAA3B,EAAAW,EAAAiB,IAAA7B,EAAAU,GAAA,KAAA8C,OAAA,YAAAS,KAAAvD,EAAA4D,WAAAnC,GAAA,KAAA+D,SAAAtF,EAAA,EAAAsF,SAAA,SAAAjG,EAAAD,GAAA,aAAAC,EAAA2B,KAAA,MAAA3B,EAAA4B,IAAA,gBAAA5B,EAAA2B,MAAA,aAAA3B,EAAA2B,KAAA,KAAAqC,KAAAhE,EAAA4B,IAAA,WAAA5B,EAAA2B,MAAA,KAAAoE,KAAA,KAAAnE,IAAA5B,EAAA4B,IAAA,KAAA2B,OAAA,cAAAS,KAAA,kBAAAhE,EAAA2B,MAAA5B,IAAA,KAAAiE,KAAAjE,GAAAmC,CAAA,EAAAgE,OAAA,SAAAlG,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAoE,aAAArE,EAAA,YAAAiG,SAAAhG,EAAAyE,WAAAzE,EAAAqE,UAAAG,EAAAxE,GAAAiC,CAAA,kBAAAlC,GAAA,QAAAD,EAAA,KAAAwE,WAAAM,OAAA,EAAA9E,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAsE,WAAAxE,GAAA,GAAAE,EAAAkE,SAAAnE,EAAA,KAAAI,EAAAH,EAAAyE,WAAA,aAAAtE,EAAAuB,KAAA,KAAArB,EAAAF,EAAAwB,IAAA6C,EAAAxE,EAAA,QAAAK,CAAA,QAAA+C,MAAA,0BAAA8C,cAAA,SAAApG,EAAAE,EAAAG,GAAA,YAAAoD,SAAA,CAAA5C,SAAA6B,EAAA1C,GAAAgE,WAAA9D,EAAAgE,QAAA7D,GAAA,cAAAmD,SAAA,KAAA3B,IAAA5B,GAAAkC,CAAA,GAAAnC,CAAA,UAAAqG,EAAAhG,EAAAJ,EAAAD,EAAAE,EAAAK,EAAAK,EAAAE,GAAA,QAAAJ,EAAAL,EAAAO,GAAAE,GAAAE,EAAAN,EAAAD,KAAA,OAAAJ,GAAA,YAAAL,EAAAK,EAAA,CAAAK,EAAA6C,KAAAtD,EAAAe,GAAAwE,QAAAtC,QAAAlC,GAAAoC,KAAAlD,EAAAK,EAAA,UAAA+F,EAAAjG,GAAA,sBAAAJ,EAAA,KAAAD,EAAAuG,UAAA,WAAAf,SAAA,SAAAtF,EAAAK,GAAA,IAAAK,EAAAP,EAAAmG,MAAAvG,EAAAD,GAAA,SAAAyG,EAAApG,GAAAgG,EAAAzF,EAAAV,EAAAK,EAAAkG,EAAAC,EAAA,OAAArG,EAAA,UAAAqG,EAAArG,GAAAgG,EAAAzF,EAAAV,EAAAK,EAAAkG,EAAAC,EAAA,QAAArG,EAAA,CAAAoG,OAAA,OACA,IAAME,EAAuB,kCACvBC,EAAwB,GAAHC,OAAMF,EAAoB,UAC/CG,EAAwB,GAAHD,OAAMF,EAAoB,UAO1B,SAAAI,IAqB1B,OArB0BA,EAAAT,EAAAvG,IAAAoF,MAA3B,SAAA6B,IAAA,IAAAC,EAAAC,EAAA,OAAAnH,IAAAuB,MAAA,SAAA6F,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAlD,MAAA,cAAAkD,EAAAvB,KAAA,EAAAuB,EAAAlD,KAAA,EAGgCmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAAzD,IAAAJ,EAAAxD,KACD6D,qBAAsB,CAAFL,EAAAlD,KAAA,eAAAkD,EAAArD,OAAA,UACvB,GAAI,cAAAqD,EAAAlD,KAAA,EAIKmD,OAAOC,QAAQI,KAAKF,IAAI,CAAC,sBAAuB,wBAAuB,OAAhF,IAALN,EAAKE,EAAAxD,MACA+D,qBAAwBT,EAAMU,oBAAmB,CAAAR,EAAAlD,KAAA,gBAAAkD,EAAArD,OAAA,UACjD,GAAK,eAAAqD,EAAAlD,KAAA,GAII2D,EAAmBX,EAAMS,oBAAqBT,EAAMU,qBAAoB,QAAjF,OAALT,EAAKC,EAAAxD,KAAAwD,EAAArD,OAAA,SACJ+D,QAAQX,IAAM,QAEoB,OAFpBC,EAAAvB,KAAA,GAAAuB,EAAAW,GAAAX,EAAA,SAErBY,QAAQC,MAAM,qBAAoBb,EAAAW,IAAOX,EAAArD,OAAA,UAClC,GAAK,yBAAAqD,EAAApB,OAAA,GAAAiB,EAAA,oBAEnBR,MAAA,KAAAD,UAAA,UAEcqB,EAAkBK,EAAAC,GAAA,OAAAC,EAAA3B,MAAC,KAADD,UAAA,CA2BjC,SAAA4B,IAFC,OAEDA,EAAA7B,EAAAvG,IAAAoF,MA3BA,SAAAiD,EAAkCC,EAAUC,GAAQ,IAAAC,EAAAC,EAAAtB,EAAA,OAAAnH,IAAAuB,MAAA,SAAAmH,GAAA,cAAAA,EAAA7C,KAAA6C,EAAAxE,MAAA,OACkB,OAAlE8D,QAAQW,IAAI,2CAA4CL,GAAUI,EAAAxE,KAAA,EAC3C0E,MAAM/B,EAAuB,CAChDpD,OAAQ,OACRoF,QAAS,CAAE,eAAgB,kCAC3BC,KAAMC,KAAKC,UAAU,CAAEV,SAAAA,EAAUC,SAAAA,MACnC,OAJY,IAARC,EAAQE,EAAA9E,MAMAqF,GAAI,CAAFP,EAAAxE,KAAA,YACY,MAApBsE,EAASU,OAAc,CAAAR,EAAAxE,KAAA,cACjB,IAAIX,MAAM,gCAA+B,cAAAmF,EAAAxE,KAAA,EAE3BsE,EAASW,OAAM,OACe,MADhDV,EAASC,EAAA9E,KACfoE,QAAQC,MAAM,4BAA6BQ,GACrC,IAAIlF,MAAM,iBAADuD,OAAkB2B,IAAY,QAGC,GAA5CtB,EAAQqB,EAASK,QAAQrB,IAAI,gBACvB,CAAFkB,EAAAxE,KAAA,eACA,IAAIX,MAAM,8CAA6C,eAAAmF,EAAAxE,KAAA,GAG3DmD,OAAOC,QAAQC,MAAM6B,IAAI,CAAE3B,qBAAsBN,IAAQ,QACL,OAA1Da,QAAQW,IAAI,sCAAuCxB,GAAOuB,EAAA3E,OAAA,SACnDoD,GAAK,yBAAAuB,EAAA1C,OAAA,GAAAqC,EAAA,MACf5B,MAAA,KAAAD,UAAA,UAKc6C,IAAc,OAAAC,EAAA7C,MAAC,KAADD,UAAA,CAyB7B,SAAA8C,IAFC,OAEDA,EAAA/C,EAAAvG,IAAAoF,MAzBA,SAAAmE,IAAA,IAAAC,EAAA/B,EAAAe,EAAAiB,EAAA,OAAAzJ,IAAAuB,MAAA,SAAAmI,GAAA,cAAAA,EAAA7D,KAAA6D,EAAAxF,MAAA,cAAAwF,EAAAxF,KAAA,EAC2CmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAA3D,GAA2DgC,EAAAE,EAAA9F,KAA/E6D,EAAoB+B,EAApB/B,qBACmB,CAAFiC,EAAAxF,KAAA,cACf,IAAIX,MAAM,YAAW,cAAAmG,EAAAxF,KAAA,EAER0E,MAAM,GAAD9B,OAAIF,EAAoB,kBAAkB,CAClEnD,OAAQ,MACRoF,QAAS,CACL,eAAgB,iCAChB,eAAgBpB,KAEtB,OANY,GAQU,OARlBe,EAAQkB,EAAA9F,MAQDsF,OAAc,CAAAQ,EAAAxF,KAAA,eACjB,IAAIX,MAAM,iBAAgB,WAE/BiF,EAASS,GAAI,CAAFS,EAAAxF,KAAA,eACN,IAAIX,MAAM,gCAA+B,eAAAmG,EAAAxF,KAAA,GAGhCsE,EAASmB,OAAM,QACgB,OAD5CF,EAAIC,EAAA9F,KACVoE,QAAQW,IAAI,+BAAgCc,GAAMC,EAAA3F,OAAA,SAC3C0F,GAAI,yBAAAC,EAAA1D,OAAA,GAAAuD,EAAA,MACd9C,MAAA,KAAAD,UAAA,UAKcoD,EAAkBC,GAAA,OAAAC,EAAArD,MAAC,KAADD,UAAA,CA4BjC,SAAAsD,IAFC,OAEDA,EAAAvD,EAAAvG,IAAAoF,MA5BA,SAAA2E,EAAkCC,GAAQ,IAAAC,EAAAxC,EAAAyC,EAAA1B,EAAA2B,EAAA,OAAAnK,IAAAuB,MAAA,SAAA6I,GAAA,cAAAA,EAAAvE,KAAAuE,EAAAlG,MAAA,cAAAkG,EAAAlG,KAAA,EACCmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAA3D,GAA2DyC,EAAAG,EAAAxG,KAA/E6D,EAAoBwC,EAApBxC,qBACmB,CAAF2C,EAAAlG,KAAA,cACf,IAAIX,MAAM,YAAW,OAGoB,OAD7C2G,EAAM,GAAHpD,OAAMF,EAAoB,qCAAAE,OAAoCkD,GACvEhC,QAAQW,IAAI,iCAAkCuB,GAAKE,EAAAlG,KAAA,GAE5B0E,MAAMsB,EAAK,CAC9BzG,OAAQ,MACRoF,QAAS,CACL,eAAgB,iCAChB,eAAgBpB,KAEtB,QANY,GAQU,OARlBe,EAAQ4B,EAAAxG,MAQDsF,OAAc,CAAAkB,EAAAlG,KAAA,eACjB,IAAIX,MAAM,iBAAgB,WAE/BiF,EAASS,GAAI,CAAFmB,EAAAlG,KAAA,eACN,IAAIX,MAAM,4BAA2B,eAAA6G,EAAAlG,KAAA,GAGxBsE,EAASmB,OAAM,QAC+B,OAD/DQ,EAAQC,EAAAxG,KACdoE,QAAQW,IAAI,uCAAwCwB,EAASpF,QAAQqF,EAAArG,OAAA,SAC9DoG,GAAQ,yBAAAC,EAAApE,OAAA,GAAA+D,EAAA,MAClBtD,MAAA,KAAAD,UAAA,UAKc6D,IAAW,OAAAC,EAAA7D,MAAC,KAADD,UAAA,CAM1B,SAAA8D,IAFC,OAEDA,EAAA/D,EAAAvG,IAAAoF,MANA,SAAAmF,IAAA,IAAAd,EAAAU,EAAA,OAAAnK,IAAAuB,MAAA,SAAAiJ,GAAA,cAAAA,EAAA3E,KAAA2E,EAAAtG,MAAA,cAAAsG,EAAAtG,KAAA,EACuBmF,IAAgB,OAAzB,OAAJI,EAAIe,EAAA5G,KAAA4G,EAAAtG,KAAG,EACU0F,EAAmBH,EAAKgB,IAAG,OAApC,OAARN,EAAQK,EAAA5G,KAAA4G,EAAAzG,OAAA,SACP,CAAE0F,KAAAA,EAAMU,SAAAA,IAAU,wBAAAK,EAAAxE,OAAA,GAAAuE,EAAA,MAC5B9D,MAAA,KAAAD,UAAA,CAwDD,SAAAkE,IAFC,OAEDA,EAAAnE,EAAAvG,IAAAoF,MAlDA,SAAAuF,EAA4BC,EAAUC,EAAcC,GAAO,IAAAC,EAAAtD,EAAAuD,EAAAxC,EAAAyC,EAAAC,EAAAzC,EAAA0C,EAAA,OAAAnL,IAAAuB,MAAA,SAAA6J,GAAA,cAAAA,EAAAvF,KAAAuF,EAAAlH,MAAA,cAAAkH,EAAAlH,KAAA,EAChBmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAA3D,GAA2DuD,EAAAK,EAAAxH,KAA/E6D,EAAoBsD,EAApBtD,qBACmB,CAAF2D,EAAAlH,KAAA,cACf,IAAIX,MAAM,YAAW,OAQoC,OAN7DyH,EAAW,CACb7F,KAAM,GAAF2B,OAAK8D,EAAQ,OAAA9D,OAAM+D,GACvBhJ,KAAM,cACNiJ,QAAAA,GAGJ9C,QAAQW,IAAI,4CAA6CqC,GAAUI,EAAAlH,KAAA,GAE5C0E,MAAM7B,EAAuB,CAChDtD,OAAQ,OACRoF,QAAS,CACL,eAAgB,iCAChB,OAAU,oCACV,eAAgBpB,GAEpBqB,KAAMC,KAAKC,UAAUgC,KACvB,QARY,GAUU,OAVlBxC,EAAQ4C,EAAAxH,MAUDsF,OAAc,CAAAkC,EAAAlH,KAAA,eACjB,IAAIX,MAAM,iBAAgB,WAEZ,MAApBiF,EAASU,OAAc,CAAAkC,EAAAlH,KAAA,gBAAAkH,EAAAlH,KAAA,GACKsE,EAASmB,OAAM,QACc,GADnDuB,EAAaE,EAAAxH,KACnBoE,QAAQC,MAAM,2BAA4BiD,KAEtCG,MAAMC,QAAQJ,IACdA,EAAcnG,OAAS,GACY,sBAAX,QAAxBkG,EAAAC,EAAc,GAAGK,eAAO,IAAAN,OAAA,EAAxBA,EAA0BO,OAA2B,CAAAJ,EAAAlH,KAAA,eAE/C,IAAIX,MAAM,uCAAsC,cAEhD,IAAIA,MAAMwF,KAAKC,UAAUkC,IAAe,WAGjD1C,EAASS,GAAI,CAAFmC,EAAAlH,KAAA,gBAAAkH,EAAAlH,KAAA,GACYsE,EAASW,OAAM,QACe,MADhDV,EAAS2C,EAAAxH,KACfoE,QAAQC,MAAM,4BAA6BQ,GACrC,IAAIlF,MAAMkF,GAAU,eAAA2C,EAAAlH,KAAA,GAGXsE,EAASmB,OAAM,QACyB,OADrDwB,EAAIC,EAAAxH,KACVoE,QAAQW,IAAI,wCAAyCwC,GAAMC,EAAArH,OAAA,SACpDoH,GAAI,yBAAAC,EAAApF,OAAA,GAAA2E,EAAA,MACdlE,MAAA,KAAAD,UAAA,CA+BD,SAAAiF,IAFC,OAEDA,EAAAlF,EAAAvG,IAAAoF,MAzBA,SAAAsG,EAA8BC,EAAU3B,GAAQ,IAAA4B,EAAAnE,EAAAmD,EAAAiB,EAAA3B,EAAA1B,EAAAsD,EAAA,OAAA9L,IAAAuB,MAAA,SAAAwK,GAAA,cAAAA,EAAAlG,KAAAkG,EAAA7H,MAAA,cAAA6H,EAAA7H,KAAA,EACLmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAA3D,GAA2DoE,EAAAG,EAAAnI,KAA/E6D,EAAoBmE,EAApBnE,qBACmB,CAAFsE,EAAA7H,KAAA,cACf,IAAIX,MAAM,YAAW,OAKS,OAHlCqH,EAAWe,EAASK,MAAM,OAAO,GAAGC,OACpCJ,EAAcK,mBAAmBtB,GACjCV,EAAM,GAAHpD,OAAMF,EAAoB,uCAAAE,OAAsC+E,EAAW,sBAAA/E,OAAqBkD,GACzGhC,QAAQW,IAAI,sBAAuBuB,GAAK6B,EAAA7H,KAAA,GAEjB0E,MAAMsB,EAAK,CAC9BzG,OAAQ,MACRoF,QAAS,CACL,eAAgB,iCAChB,eAAgBpB,KAEtB,QANY,GAOU,OAPlBe,EAAQuD,EAAAnI,MAODsF,OAAc,CAAA6C,EAAA7H,KAAA,eACjB,IAAIX,MAAM,iBAAgB,eAAAwI,EAAA7H,KAAA,GAEfsE,EAASmB,OAAM,QACY,OAD1CmC,EAAMC,EAAAnI,KACZoE,QAAQW,IAAI,2BAA4BmD,GAAQC,EAAAhI,OAAA,SACzC+H,GAAM,yBAAAC,EAAA/F,OAAA,GAAA0F,EAAA,MAChBjF,MAAA,KAAAD,UAAA,CAMD,SAAS2F,EAAWC,GAGhB,IAFA,IAAIC,EAAU,KACRC,EAAY,CAAC,EACV3L,EAAI,EAAGA,EAAIyL,EAAWrH,OAAQpE,IAAK,CACxC,IAAM4L,EAAOH,EAAWzL,GAClB6L,EAAUC,SAASJ,EAAS,GAClCC,EAAUC,GAAQ,CACdF,QAASG,EACTE,MAAOH,GAEXF,GAAWG,GAAW,GAAGG,SAAS,EACtC,CACA,OAAOvM,OAAOuC,OAAO2J,EACzB,CA8FA,SAAAM,IAFC,OAEDA,EAAArG,EAAAvG,IAAAoF,MAzFA,SAAAyH,EAA6BC,EAAiBC,EAAWC,EAASC,EAASC,GAAe,IAAAC,EAAA1F,EAAA2F,EAAAC,EAAAC,EAAApD,EAAA1B,EAAAC,EAAA8E,EAAArC,EAAAsC,EAAArC,EAAA,OAAAnL,IAAAuB,MAAA,SAAAkM,GAAA,cAAAA,EAAA5H,KAAA4H,EAAAvJ,MAAA,cAAAuJ,EAAAvJ,KAAA,EAC/CmD,OAAOC,QAAQC,MAAMC,IAAI,wBAAuB,OAA3D,GAA2D2F,EAAAM,EAAA7J,KAA/E6D,EAAoB0F,EAApB1F,qBACmB,CAAFgG,EAAAvJ,KAAA,cACf,IAAIX,MAAM,YAAW,OA0CI,OAvC7B6J,EAAc,CAChB3C,GAAIyC,EAAgBzC,GACpBiD,SAAUR,EAAgBQ,SAC1BC,UAAWT,EAAgBS,UAC3BC,SAAUV,EAAgBU,SAC1BC,MAAO1B,EAAWe,EAAgBW,OAAS,IAC3CC,UAAWZ,EAAgBY,WAAa,KACxCC,QAASb,EAAgBa,SAAW,MAGlCV,EAAY,CACd5C,GAAIqC,EAAgBrC,GACpBtF,KAAM2H,EAAgB3H,KACtBtD,KAAMiL,EAAgBjL,KACtBiJ,QAASgC,EAAgBhC,QACzBkD,SAAUlB,EAAgBkB,SAC1BC,YAAanB,EAAgBmB,YAC7BC,kBAAmBpB,EAAgBoB,kBACnCC,cAAerB,EAAgBqB,eAAiB,EAChDC,aAActB,EAAgBsB,cAAgB,EAC9CC,aAAcvB,EAAgBuB,cAAgB,EAC9CC,eAAgBxB,EAAgBwB,gBAAkB,EAClDC,gBAAiBzB,EAAgByB,iBAAmB,EACpDC,gBAAiB1B,EAAgB0B,gBACjCC,qBAAsB3B,EAAgB2B,qBACtCC,aAAc5B,EAAgB4B,cAG5BpB,EAAW,CACbP,UAAAA,EACAC,QAAAA,EACAC,QAASA,GAAW,GACpB0B,WAAW,EACXC,KAAMvB,EACNwB,OAAQzB,GAGZpF,QAAQW,IAAI,kCAAmC2E,GAEzCpD,EAAM,GAAHpD,OAAMF,EAAoB,sBAAA6G,EAAAvJ,KAAA,GACZ0E,MAAMsB,EAAK,CAC9BzG,OAAQ,OACRoF,QAAS,CACL,eAAgB,iCAChB,OAAU,oCACV,eAAgBpB,GAEpBqB,KAAMC,KAAKC,UAAUsE,KACvB,QARY,GAUU,OAVlB9E,EAAQiF,EAAA7J,MAUDsF,OAAc,CAAAuE,EAAAvJ,KAAA,eACjB,IAAIX,MAAM,iBAAgB,WAE/BiF,EAASS,GAAI,CAAFwE,EAAAvJ,KAAA,gBAAAuJ,EAAAvJ,KAAA,GACYsE,EAASW,OAAM,QAGQ,GAHzCV,EAASgF,EAAA7J,KACfoE,QAAQC,MAAM,6BAA8BQ,GAAWgF,EAAA5H,KAAA,GAE7CqF,EAAgBnC,KAAK+F,MAAMrG,IAC7B4C,MAAMC,QAAQJ,IAAkC,QAApBqC,EAAIrC,EAAc,UAAE,IAAAqC,GAAS,QAATA,EAAhBA,EAAkBhC,eAAO,IAAAgC,IAAzBA,EAA2B/B,KAAI,CAAAiC,EAAAvJ,KAAA,SAChB,GAC7B,8BADAgH,EAAc,GAAGK,QAAQC,KACE,CAAAiC,EAAAvJ,KAAA,gBAAAuJ,EAAA1J,OAAA,SAClC0B,QAAQsJ,OAAO,IAAIxL,MAAM,2DAAyD,eAAAkK,EAAA1J,OAAA,SAG1F0B,QAAQsJ,OAAO,IAAIxL,MAAM,oCAAkC,QAEC,OAFDkK,EAAA5H,KAAA,GAAA4H,EAAA1F,GAAA0F,EAAA,UAElEzF,QAAQC,MAAM,iDAAgDwF,EAAA1F,IAAK0F,EAAA1J,OAAA,SAC5D0B,QAAQsJ,OAAO,IAAIxL,MAAM,oCAAkC,eAAAkK,EAAAvJ,KAAA,GAI/CsE,EAASW,OAAM,QAApCqE,EAAYC,EAAA7J,KAElB,IACIuH,EAAOqC,EAAezE,KAAK+F,MAAMtB,GAAgB,CAAC,CACtD,CAAE,MAAOvN,GACL+H,QAAQC,MAAM,uCAAwChI,GACtDkL,EAAO,CAAC,CACZ,CACsD,OAAtDnD,QAAQW,IAAI,mCAAoCwC,GAAMsC,EAAA1J,OAAA,SAC/CoH,GAAI,yBAAAsC,EAAAzH,OAAA,GAAA6G,EAAA,qBACdpG,MAAA,KAAAD,UAAA,CAKDa,OAAO2H,QAAQC,UAAUC,aAAY,SAACC,EAASC,EAAQC,GAGnD,GAFArH,QAAQW,IAAI,6BAA8BwG,GAEnB,0BAAnBA,EAAQG,OAoBR,OAvVR,WAK2B,OAAAtI,EAAAP,MAAC,KAADD,UAAA,CA+TnB+I,GACKlM,MAAK,SAAAmM,GACF,GAAIA,EACA,OAAOnF,IAEP,MAAM,IAAI9G,MAAM,WAExB,IACCF,MAAK,SAAAoM,GAAwB,IAArBhG,EAAIgG,EAAJhG,KAAMU,EAAQsF,EAARtF,SACXkF,EAAa,CAAEG,SAAS,EAAM/F,KAAAA,EAAMU,SAAAA,GACxC,IAAE,OACK,SAAAuF,GACH1H,QAAQC,MAAM,+BAAgCyH,EAAInE,SAC9B,aAAhBmE,EAAInE,SAA0C,kBAAhBmE,EAAInE,QAClC8D,EAAa,CAAEG,SAAS,EAAOG,iBAAiB,IAEhDN,EAAa,CAAEG,SAAS,EAAOvH,MAAOyH,EAAInE,SAElD,KACG,EAGX,GAAuB,UAAnB4D,EAAQG,OAAoB,CAC5B,IAAAM,EAA+BT,EAAQU,QAQvC,OAPAhI,EADgB+H,EAARtH,SAAkBsH,EAARrH,UAEblF,MAAK,kBAAMgH,GAAa,IACxBhH,MAAK,SAAAyM,GAAA,IAAGrG,EAAIqG,EAAJrG,KAAMU,EAAQ2F,EAAR3F,SAAQ,OAAOkF,EAAa,CAAEG,SAAS,EAAM/F,KAAAA,EAAMU,SAAAA,GAAW,IAAC,OACvE,SAAAuF,GACH1H,QAAQC,MAAM,eAAgByH,EAAInE,SAClC8D,EAAa,CAAEG,SAAS,EAAOvH,MAAOyH,EAAInE,SAC9C,KACG,CACX,CAEA,GAAuB,sBAAnB4D,EAAQG,OAAgC,CACxC,IAAAS,EAA+BZ,EAAQU,QAWvC,OAnMP,SAM4BG,EAAAC,GAAA,OAAAxE,EAAAhF,MAAC,KAADD,UAAA,CAmLrB0J,CADgBH,EAARpE,SAAkBoE,EAAR/F,UAEb3G,MAAK,SAAAyI,GAAM,OAAIuD,EAAa,CAAEG,SAAS,EAAMrE,KAAMW,GAAS,IAAC,OACvD,SAAA4D,GACH1H,QAAQC,MAAM,2BAA4ByH,EAAInE,SAC1B,aAAhBmE,EAAInE,SAA0C,kBAAhBmE,EAAInE,QAClC8D,EAAa,CAAEG,SAAS,EAAOG,iBAAiB,IAEhDN,EAAa,CAAEG,SAAS,EAAOvH,MAAOyH,EAAInE,SAElD,KACG,CACX,CAEA,GAAuB,4BAAnB4D,EAAQG,OAAsC,CAC9C,IAAAa,EAA4ChB,EAAQU,QAWpD,OAxQP,SAM0BO,EAAAC,EAAAC,GAAA,OAAA5F,EAAAjE,MAAC,KAADD,UAAA,CAwPnB+J,CADgBJ,EAARvF,SAAsBuF,EAAZtF,aAAqBsF,EAAPrF,SAE3BzH,MAAK,SAAAmN,GAAW,OAAInB,EAAa,CAAEG,SAAS,EAAMrE,KAAMqF,GAAc,IAAC,OACjE,SAAAd,GACH1H,QAAQC,MAAM,iCAAkCyH,EAAInE,SAChC,aAAhBmE,EAAInE,SAA0C,kBAAhBmE,EAAInE,QAClC8D,EAAa,CAAEG,SAAS,EAAOG,iBAAiB,IAEhDN,EAAa,CAAEG,SAAS,EAAOvH,MAAOyH,EAAInE,SAElD,KACG,CACX,CAEA,GAAuB,mBAAnB4D,EAAQG,OAA6B,CACrC,IAAAmB,EAAsDtB,EAAQU,QAW9D,OA/KR,SAG4Ba,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAlE,EAAAnG,MAAC,KAADD,UAAA,CAkKpBuK,CADYN,EAAJ7B,KAAe6B,EAAT1D,UAAkB0D,EAAPzD,QAAgByD,EAAPxD,QAAewD,EAAN5B,QAEtCxL,MAAK,SAAAyI,GAAM,OAAIuD,EAAa,CAAEG,SAAS,EAAMrE,KAAMW,GAAS,IAAC,OACvD,SAAA4D,GACH1H,QAAQC,MAAM,wBAAyByH,EAAInE,SACvB,aAAhBmE,EAAInE,SAA0C,kBAAhBmE,EAAInE,QAClC8D,EAAa,CAAEG,SAAS,EAAOG,iBAAiB,IAEhDN,EAAa,CAAEG,SAAS,EAAOvH,MAAOyH,EAAInE,SAElD,KACG,CACX,CACJ","sources":["webpack://timetracker-react-ext/./src/background.js"],"sourcesContent":["// src/background.js\n\nconst TIMETRACKER_BASE_URL = 'https://timetracker.iglu.ee/api';\nconst TIMETRACKER_LOGIN_URL = `${TIMETRACKER_BASE_URL}/login`;\nconst TIMETRACKER_TASKS_URL = `${TIMETRACKER_BASE_URL}/tasks`;\n\n/**\n * Logs in with given username/password – returns x-auth-token\n * and stores it in chrome.storage.local.\n */\n\nasync function tryAutoLogin() {\n    try {\n        // Check if we already have a valid token\n        const tokenData = await chrome.storage.local.get('timetrackerAuthToken');\n        if (tokenData.timetrackerAuthToken) {\n            return true;\n        }\n\n        // Get stored credentials\n        const creds = await chrome.storage.sync.get(['timetrackerUsername', 'timetrackerPassword']);\n        if (!creds.timetrackerUsername || !creds.timetrackerPassword) {\n            return false;\n        }\n\n        // Try to login\n        const token = await loginToTimetracker(creds.timetrackerUsername, creds.timetrackerPassword);\n        return Boolean(token);\n    } catch (err) {\n        console.error('Auto-login failed:', err);\n        return false;\n    }\n}\n\nasync function loginToTimetracker(username, password) {\n    console.log('loginToTimetracker: Attempting login for', username);\n    const response = await fetch(TIMETRACKER_LOGIN_URL, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json;charset=UTF-8' },\n        body: JSON.stringify({ username, password })\n    });\n\n    if (!response.ok) {\n        if (response.status === 401) {\n            throw new Error('Invalid username or password');\n        }\n        const errorText = await response.text();\n        console.error('loginToTimetracker error:', errorText);\n        throw new Error(`Login failed: ${errorText}`);\n    }\n\n    const token = response.headers.get('x-Auth-Token');\n    if (!token) {\n        throw new Error('No x-Auth-Token found in response headers.');\n    }\n\n    await chrome.storage.local.set({ timetrackerAuthToken: token });\n    console.log('loginToTimetracker: Received token:', token);\n    return token;\n}\n\n/**\n * Uses the stored token to get the current user.\n */\nasync function getCurrentUser() {\n    const { timetrackerAuthToken } = await chrome.storage.local.get('timetrackerAuthToken');\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const response = await fetch(`${TIMETRACKER_BASE_URL}/users/current`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch current user');\n    }\n\n    const user = await response.json();\n    console.log('getCurrentUser: user object:', user);\n    return user;\n}\n\n/**\n * Uses the stored token to get projects for the given user id.\n */\nasync function getProjectsForUser(personId) {\n    const { timetrackerAuthToken } = await chrome.storage.local.get('timetrackerAuthToken');\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const url = `${TIMETRACKER_BASE_URL}/projects?isActive=true&personId=${personId}`;\n    console.log('getProjectsForUser: requesting', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        throw new Error('Failed to fetch projects');\n    }\n\n    const projects = await response.json();\n    console.log('getProjectsForUser: projects count =', projects.length);\n    return projects;\n}\n\n/**\n * Return user + all active projects for that user.\n */\nasync function getProjects() {\n    const user = await getCurrentUser();\n    const projects = await getProjectsForUser(user.id);\n    return { user, projects };\n}\n\n/**\n * Create a new Timetracker task.\n * (The response may be partial.)\n */\nasync function doCreateTask(issueKey, issueSummary, project) {\n    const { timetrackerAuthToken } = await chrome.storage.local.get('timetrackerAuthToken');\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const postData = {\n        name: `${issueKey} - ${issueSummary}`,\n        type: 'development',\n        project\n    };\n\n    console.log('doCreateTask: Creating task with payload:', postData);\n\n    const response = await fetch(TIMETRACKER_TASKS_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(postData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (response.status === 400) {\n        const errorResponse = await response.json();\n        console.error('doCreateTask: 400 error:', errorResponse);\n        if (\n            Array.isArray(errorResponse) &&\n            errorResponse.length > 0 &&\n            errorResponse[0].message?.code === 'taskDuplicateKey'\n        ) {\n            throw new Error('Task already exists in Timetracker!');\n        } else {\n            throw new Error(JSON.stringify(errorResponse));\n        }\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('doCreateTask: error text:', errorText);\n        throw new Error(errorText);\n    }\n\n    const data = await response.json();\n    console.log('doCreateTask: (Partial) task created:', data);\n    return data;\n}\n\n/**\n * Find a Timetracker task by name for the given user.\n * Returns an array with FULL task objects.\n */\nasync function findTaskByName(taskName, personId) {\n    const { timetrackerAuthToken } = await chrome.storage.local.get('timetrackerAuthToken');\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n    const issueKey = taskName.split(' - ')[0].trim();\n    const encodedName = encodeURIComponent(issueKey);\n    const url = `${TIMETRACKER_BASE_URL}/calendar/tasks/actions/findByName/${encodedName}?selectedPersonId=${personId}`;\n    console.log('findTaskByName: GET', url);\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'x-auth-token': timetrackerAuthToken\n        }\n    });\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    const result = await response.json();\n    console.log('findTaskByName: result =', result);\n    return result;\n}\n\n/**\n * Build roles dynamically into objects with bitMask values.\n * ...\n */\nfunction buildRoles(rolesArray) {\n    let bitMask = \"01\";\n    const userRoles = {};\n    for (let i = 0; i < rolesArray.length; i++) {\n        const role = rolesArray[i];\n        const intCode = parseInt(bitMask, 2);\n        userRoles[role] = {\n            bitMask: intCode,\n            title: role\n        };\n        bitMask = (intCode << 1).toString(2);\n    }\n    return Object.values(userRoles);\n}\n\n/**\n * Create a worklog entry using a FULL task object.\n */\nasync function createWorklog(taskFromContent, startTime, endTime, comment, userFromContent) {\n    const { timetrackerAuthToken } = await chrome.storage.local.get('timetrackerAuthToken');\n    if (!timetrackerAuthToken) {\n        throw new Error('NO_TOKEN');\n    }\n\n    const finalPerson = {\n        id: userFromContent.id,\n        fullName: userFromContent.fullName,\n        firstName: userFromContent.firstName,\n        lastName: userFromContent.lastName,\n        roles: buildRoles(userFromContent.roles || []),\n        startDate: userFromContent.startDate || null,\n        endDate: userFromContent.endDate || null\n    };\n\n    const finalTask = {\n        id: taskFromContent.id,\n        name: taskFromContent.name,\n        type: taskFromContent.type,\n        project: taskFromContent.project,\n        isActive: taskFromContent.isActive,\n        hasWorklogs: taskFromContent.hasWorklogs,\n        isCommentRequired: taskFromContent.isCommentRequired,\n        estimateDevel: taskFromContent.estimateDevel || 0,\n        estimateAnal: taskFromContent.estimateAnal || 0,\n        estimateTest: taskFromContent.estimateTest || 0,\n        estimateBuffer: taskFromContent.estimateBuffer || 0,\n        estimateGeneral: taskFromContent.estimateGeneral || 0,\n        generalDuration: taskFromContent.generalDuration,\n        generalDurationHours: taskFromContent.generalDurationHours,\n        firstInGroup: taskFromContent.firstInGroup\n    };\n\n    const bodyData = {\n        startTime,\n        endTime,\n        comment: comment || '',\n        isPlanlog: false,\n        task: finalTask,\n        person: finalPerson\n    };\n\n    console.log('createWorklog: final payload =>', bodyData);\n\n    const url = `${TIMETRACKER_BASE_URL}/calendar/worklogs`;\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'Accept': 'application/json, text/plain, */*',\n            'x-auth-token': timetrackerAuthToken\n        },\n        body: JSON.stringify(bodyData)\n    });\n\n    if (response.status === 401) {\n        throw new Error('TOKEN_INVALID');\n    }\n    if (!response.ok) {\n        const errorText = await response.text();\n        console.error('createWorklog: error text:', errorText);\n        try {\n            const errorResponse = JSON.parse(errorText);\n            if (Array.isArray(errorResponse) && errorResponse[0]?.message?.code) {\n                const errorCode = errorResponse[0].message.code;\n                if (errorCode === 'worklogConcurrentWorklogs') {\n                    return Promise.reject(new Error('Worklog already exists for the specified time period.'));\n                }\n            }\n            return Promise.reject(new Error('Unknown error format received.'));\n        } catch (e) {\n            console.error('createWorklog: Failed to parse error response:', e);\n            return Promise.reject(new Error('Failed to parse error response'));\n        }\n    }\n\n    const responseText = await response.text();\n    let data;\n    try {\n        data = responseText ? JSON.parse(responseText) : {};\n    } catch (e) {\n        console.error('createWorklog: Failed to parse JSON:', e);\n        data = {};\n    }\n    console.log('createWorklog: success response:', data);\n    return data;\n}\n\n/**\n * Listen for messages from the content script.\n */\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('background.js - onMessage:', request);\n\n    if (request.action === 'GET_PROJECTS_AND_USER') {\n        tryAutoLogin()\n            .then(success => {\n                if (success) {\n                    return getProjects();\n                } else {\n                    throw new Error('NO_TOKEN');\n                }\n            })\n            .then(({ user, projects }) => {\n                sendResponse({ success: true, user, projects });\n            })\n            .catch(err => {\n                console.error('GET_PROJECTS_AND_USER error:', err.message);\n                if (err.message === 'NO_TOKEN' || err.message === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: err.message });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'LOGIN') {\n        const { username, password } = request.payload;\n        loginToTimetracker(username, password)\n            .then(() => getProjects())\n            .then(({ user, projects }) => sendResponse({ success: true, user, projects }))\n            .catch(err => {\n                console.error('LOGIN error:', err.message);\n                sendResponse({ success: false, error: err.message });\n            });\n        return true;\n    }\n\n    if (request.action === 'FIND_TASK_BY_NAME') {\n        const { taskName, personId } = request.payload;\n        findTaskByName(taskName, personId)\n            .then(result => sendResponse({ success: true, data: result }))\n            .catch(err => {\n                console.error('FIND_TASK_BY_NAME error:', err.message);\n                if (err.message === 'NO_TOKEN' || err.message === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: err.message });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_TIMETRACKER_TASK') {\n        const { issueKey, issueSummary, project } = request.payload;\n        doCreateTask(issueKey, issueSummary, project)\n            .then(partialTask => sendResponse({ success: true, data: partialTask }))\n            .catch(err => {\n                console.error('CREATE_TIMETRACKER_TASK error:', err.message);\n                if (err.message === 'NO_TOKEN' || err.message === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: err.message });\n                }\n            });\n        return true;\n    }\n\n    if (request.action === 'CREATE_WORKLOG') {\n        const { task, startTime, endTime, comment, person } = request.payload;\n        createWorklog(task, startTime, endTime, comment, person)\n            .then(result => sendResponse({ success: true, data: result }))\n            .catch(err => {\n                console.error('CREATE_WORKLOG error:', err.message);\n                if (err.message === 'NO_TOKEN' || err.message === 'TOKEN_INVALID') {\n                    sendResponse({ success: false, needCredentials: true });\n                } else {\n                    sendResponse({ success: false, error: err.message });\n                }\n            });\n        return true;\n    }\n});\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","TIMETRACKER_BASE_URL","TIMETRACKER_LOGIN_URL","concat","TIMETRACKER_TASKS_URL","_tryAutoLogin","_callee","creds","token","_context","chrome","storage","local","get","timetrackerAuthToken","sync","timetrackerUsername","timetrackerPassword","loginToTimetracker","Boolean","t0","console","error","_x","_x2","_loginToTimetracker","_callee2","username","password","response","errorText","_context2","log","fetch","headers","body","JSON","stringify","ok","status","text","set","getCurrentUser","_getCurrentUser","_callee3","_yield$chrome$storage","user","_context3","json","getProjectsForUser","_x3","_getProjectsForUser","_callee4","personId","_yield$chrome$storage2","url","projects","_context4","getProjects","_getProjects","_callee5","_context5","id","_doCreateTask","_callee6","issueKey","issueSummary","project","_yield$chrome$storage3","postData","_errorResponse$0$mess","errorResponse","data","_context6","Array","isArray","message","code","_findTaskByName","_callee7","taskName","_yield$chrome$storage4","encodedName","result","_context7","split","trim","encodeURIComponent","buildRoles","rolesArray","bitMask","userRoles","role","intCode","parseInt","title","toString","_createWorklog","_callee8","taskFromContent","startTime","endTime","comment","userFromContent","_yield$chrome$storage5","finalPerson","finalTask","bodyData","_errorResponse$","responseText","_context8","fullName","firstName","lastName","roles","startDate","endDate","isActive","hasWorklogs","isCommentRequired","estimateDevel","estimateAnal","estimateTest","estimateBuffer","estimateGeneral","generalDuration","generalDurationHours","firstInGroup","isPlanlog","task","person","parse","reject","runtime","onMessage","addListener","request","sender","sendResponse","action","tryAutoLogin","success","_ref","err","needCredentials","_request$payload","payload","_ref2","_request$payload2","_x7","_x8","findTaskByName","_request$payload3","_x4","_x5","_x6","doCreateTask","partialTask","_request$payload4","_x9","_x10","_x11","_x12","_x13","createWorklog"],"sourceRoot":""}